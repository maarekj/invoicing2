{% extends "InvoicingAppBundle:Resource:form.html.twig" %}

{% form_theme form _self %}

{% set contentContentClass = "col-sm-12" %}

{% block before_form %}
<div>
    {% endblock %}

    {% block form_display %}
        <ul class="nav nav-tabs" role="tablist">
            <li class="active"><a href="#main" role="tab" data-toggle="tab">Facture</a></li>
            <li><a href="#payments" role="tab" data-toggle="tab">Paiements</a></li>
        </ul>

        {% set row_options = { horizontal_label_class: 'col-lg-2', horizontal_input_wrapper_class: 'col-lg-10'} %}
        <div class="tab-content">
            <div id="main" class="tab-pane active">
                {{ form_row(form.number, row_options) }}
                {{ form_row(form.entrepreneur, row_options) }}
                {{ form_row(form.client, row_options) }}
                {{ form_row(form.tags, row_options) }}
                {{ form_row(form.created, row_options) }}
                {{ form_row(form.footer, row_options) }}
                {{ form_row(form.lines, row_options) }}
            </div>

            <div id="payments" class="tab-pane">
                {{ form_row(form.payments, row_options) }}
            </div>
        </div>
        {{ form_rest(form, row_options) }}
    {% endblock %}

    {% block after_form %}
</div>
{% endblock %}

{% block form_submit %}
    <div class="form-group">
        <div class="col-lg-offset-2 col-lg-10">
            <button type="submit" class="btn btn-primary">Enregistrer</button>
        </div>
    </div>
{% endblock %}

{% block invoicing_invoice_line_collection_widget %}
    {% spaceless %}
        {% if horizontal and not label_render %}
            {% set horizontal_input_wrapper_class = horizontal_input_wrapper_class ~ ' ' ~ horizontal_label_offset_class %}
        {% endif %}

        <div class="{{ horizontal_input_wrapper_class }}" id="{{ form.vars.id }}_app" ng-controller="mainController">
            <table class="table table-striped table-bordered table-condensed col-sm-12">
                <colgroup>
                    <col style="width: 40%;">
                    <col style="width: 10%;">
                    <col style="width: 10%;">
                    <col style="width: 16%;">
                    <col style="width: 10%;">
                    <col style="width: 14%;">
                </colgroup>
                <thead>
                <th>Description</th>
                <th>Quantité</th>
                <th>Prix unitaire</th>
                <th>Unité</th>
                <th>Options</th>
                <th>Total</th>
                <th></th>
                </thead>
                <tbody>
                <tr ng-repeat="line in lines">
                    <td ng-class="{ {{ _self.classHasError('line.errors.description') }} }">
                        <textarea class="form-control" rows="2"
                                  ng-model="line.description" {{ _self.generateName("description") }}></textarea>
                        {{ _self.helpBlockError('line.errors.description') }}
                    </td>
                    <td ng-class="{ {{ _self.classHasError('line.errors.quantity') }} }">
                        <input type="text" class="form-control"
                               ng-model="line.quantity" {{ _self.generateName("quantity") }} />
                        {{ _self.helpBlockError('line.errors.quantity') }}
                    </td>
                    <td ng-class="{ {{ _self.classHasError('line.errors.unitPrice') }} }">
                        <input type="text" class="form-control"
                               ng-model="line.unitPrice" {{ _self.generateName("unitPrice") }} />
                        {{ _self.helpBlockError('line.errors.unitPrice') }}
                    </td>
                    <td ng-class="{ {{ _self.classHasError('line.errors.unit') }} }">
                        <input type="text" class="form-control"
                               ng-model="line.unit" {{ _self.generateName("unit") }} />
                        {{ _self.helpBlockError('line.errors.unit') }}
                    </td>
                    <td ng-class="{ {{ _self.classHasError('line.errors.options') }} }">
                        <select class="form-control"
                                ng-model="line.options" {{ _self.generateName("options") }}>
                            <option ng-repeat="choice in line.choices.options"
                                    value="{{ "choice.value"|ang }}"
                                    ng-selected="line.options == choice.value"
                                    >
                                {{ "choice.label"|ang }}
                            </option>
                        </select>
                        {{ _self.helpBlockError('line.errors.options') }}
                    </td>
                    <td>
                        {{ '(line.quantity * line.unitPrice)|currency'|ang }}
                        <input type="hidden"
                               value="{{ 'line.position'|ang }}" {{ _self.generateName("position") }} />
                    </td>
                    <td>
                        <div class="btn-group">
                            <button ng-disabled="$index == 0" class="btn btn-default btn-xs" ng-click="up($index)"
                                    prevent-default>
                                <span class="glyphicon glyphicon-arrow-up"></span>
                            </button>
                            <button ng-disabled="$index >= lines.length - 1" class="btn btn-default btn-xs"
                                    ng-click="down($index)" prevent-default>
                                <span class="glyphicon glyphicon-arrow-down"></span>
                            </button>
                            <button class="btn btn-danger btn-xs" ng-click="removeLine($index)" prevent-default>
                                <span class="glyphicon glyphicon-remove-circle"></span>
                            </button>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td colspan="5"></td>
                    <td colspan="2">{{ "total()|currency"|ang }}</td>
                </tr>
                </tbody>
            </table>
            <a class="btn btn-default" ng-click="addLine()">Ajouter une ligne</a>
        </div>
    {% endspaceless %}
{% endblock invoicing_invoice_line_collection_widget %}

{% block invoicing_invoice_line_collection_javascript %}
    <script type="text/javascript">
        jQuery(function () {
            var app = angular.module('invoicing_invoice_line_collection_app', ['ngLocale', 'preventDefault'])

            app.controller('mainController', function ($scope) {
                $scope.test = "test";

                $scope.fullname = {{ form.vars.full_name|json_encode|raw }};

                var prototypeNames = {
                    'description': {{ prototype.description.vars.full_name|json_encode|raw }},
                    'quantity': {{ prototype.quantity.vars.full_name|json_encode|raw }},
                    'unitPrice': {{ prototype.unitPrice.vars.full_name|json_encode|raw }},
                    'options': {{ prototype.options.vars.full_name|json_encode|raw }},
                    'position': {{ prototype.position.vars.full_name|json_encode|raw }},
                    'unit': {{ prototype.unit.vars.full_name|json_encode|raw }}
                };

                $scope.generateName = function (name, index) {
                    var fullname = prototypeNames[name];
                    return "" + fullname.replace(new RegExp({{ prototype.vars.name|json_encode|raw }}, 'g'), index);
                };

                $scope.lines = [
                    {% for child in form %}
                    {
                        'description': {{ child.description.vars.value|json_encode|raw }},
                        'quantity': {{ child.quantity.vars.value|json_encode|raw }},
                        'unitPrice': {{ child.unitPrice.vars.value|json_encode|raw }},
                        'options': {{ child.options.vars.value|json_encode|raw }},
                        'position': {{ child.position.vars.value|json_encode|raw }},
                        'unit': {{ child.unit.vars.value|json_encode|raw }},
                        'errors': {{ jsonAllErrors(child)|json_encode|raw }},
                        'choices': {
                            'options': {{ child.options.vars.choices|json_encode|raw}}
                        }
                    },
                    {% endfor %}
                ];

                $scope.addLine = function () {
                    $scope.lines.push({
                        'unit': 'unité',
                        'unitPrice': 1,
                        'quantity': 1,
                        'options': 'positive',
                        'position': $scope.lines.length,
                        'choices': {
                            'options': {{ prototype.options.vars.choices|json_encode|raw }}
                        }
                    });
                    arrangeSort();
                };

                $scope.up = function (index) {
                    var tmp = $scope.lines[index - 1];
                    $scope.lines[index - 1] = $scope.lines[index];
                    $scope.lines[index] = tmp;
                    arrangeSort();
                };

                $scope.down = function (index) {
                    var tmp = $scope.lines[index + 1];
                    $scope.lines[index + 1] = $scope.lines[index];
                    $scope.lines[index] = tmp;
                    arrangeSort();
                };

                $scope.removeLine = function (index) {
                    $scope.lines.splice(index, 1);
                    arrangeSort();
                };

                $scope.total = function () {
                    var total = 0;
                    for (var i = 0; i < $scope.lines.length; i++) {
                        var line = $scope.lines[i];

                        if (line.options === 'negative') {
                            total -= line.unitPrice * line.quantity;
                        } else {
                            total += line.unitPrice * line.quantity;
                        }
                    }
                    return total;
                };

                var arrangeSort = function () {
                    for (var i = 0; i < $scope.lines.length; i++) {
                        $scope.lines[i].position = i;
                    }
                };
            });

            angular.bootstrap(document.querySelector('#{{ form.vars.id }}_app'), ['invoicing_invoice_line_collection_app']);
        });
    </script>
{% endblock invoicing_invoice_line_collection_javascript %}

{% block invoicing_payment_collection_widget %}
    {% spaceless %}
        {% if horizontal and not label_render %}
            {% set horizontal_input_wrapper_class = horizontal_input_wrapper_class ~ ' ' ~ horizontal_label_offset_class %}
        {% endif %}

        <div class="{{ horizontal_input_wrapper_class }}" id="{{ form.vars.id }}_app" ng-controller="mainController">
            <table class="table table-striped table-bordered table-condensed col-sm-12">
                <thead>
                <th>Description</th>
                <th>Type</th>
                <th>Montant</th>
                <th>Date</th>
                <th></th>
                </thead>
                <tbody>
                <tr ng-repeat="payment in payments">
                    <td ng-class="{ {{ _self.classHasError('payment.errors.description') }} }">
                        <textarea class="form-control" rows="2"
                                  ng-model="payment.description" {{ _self.generateName("description") }}></textarea>
                        {{ _self.helpBlockError('payment.errors.description') }}
                    </td>
                    <td ng-class="{ {{ _self.classHasError('payment.errors.type') }} }">
                        <select class="form-control"
                                ng-model="payment.type" {{ _self.generateName("type") }}>
                            <option ng-repeat="choice in payment.choices.type"
                                    value="{{ "choice.value"|ang }}"
                                    ng-selected="payment.type == choice.value"
                                    >
                                {{ "choice.label"|ang }}
                            </option>
                        </select>
                        {{ _self.helpBlockError('payment.errors.type') }}
                    </td>
                    <td ng-class="{ {{ _self.classHasError('payment.errors.amount') }} }">
                        <input type="number" class="form-control"
                               ng-model="payment.amount" {{ _self.generateName("amount") }} />
                        {{ _self.helpBlockError('payment.errors.amount') }}
                    </td>
                    <td ng-class="{ {{ _self.classHasError('payment.errors.created') }} }">
                        <input type="date" class="form-control"
                               ng-model="payment.created" {{ _self.generateName("created") }} />
                        {{ _self.helpBlockError('payment.errors.created') }}
                    </td>
                    <td>
                        <div class="btn-group">
                            <button class="btn btn-danger btn-xs" ng-click="removePayment($index)" prevent-default>
                                <span class="glyphicon glyphicon-remove-circle"></span>
                            </button>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td colspan="2"></td>
                    <td><strong>total:</strong> {{ "total()|currency"|ang }}</td>
                    <td></td>
                </tr>
                </tbody>
            </table>
            <a class="btn btn-default" ng-click="addPayment()">Ajouter un paiement</a>
        </div>
    {% endspaceless %}
{% endblock invoicing_payment_collection_widget %}

{% block invoicing_payment_collection_javascript %}
    <script type="text/javascript">
        jQuery(function () {
            var app = angular.module('invoicing_payment_collection_app', ['ngLocale', 'preventDefault'])

            app.controller('mainController', function ($scope) {
                $scope.test = "test";

                $scope.fullname = {{ form.vars.full_name|json_encode|raw }};

                var prototypeNames = {
                    'description': {{ prototype.description.vars.full_name|json_encode|raw }},
                    'amount': {{ prototype.amount.vars.full_name|json_encode|raw }},
                    'type': {{ prototype.type.vars.full_name|json_encode|raw }},
                    'created': {{ prototype.created.vars.full_name|json_encode|raw }}
                };

                $scope.generateName = function (name, index) {
                    var fullname = prototypeNames[name];
                    return "" + fullname.replace(new RegExp({{ prototype.vars.name|json_encode|raw }}, 'g'), index);
                };

                $scope.payments = [
                    {% for child in form %}
                    {
                        'description': {{ child.description.vars.value|json_encode|raw }},
                        'amount': {{ child.amount.vars.value|json_encode|raw }},
                        'type': {{ child.type.vars.value|json_encode|raw }},
                        'created': {{ child.created.vars.value|json_encode|raw }},
                        'errors': {{ jsonAllErrors(child)|json_encode|raw }},
                        'choices': {
                            'type': {{ child.type.vars.choices|json_encode|raw}}
                        }
                    },
                    {% endfor %}
                ];

                $scope.addPayment = function () {
                    $scope.payments.push({
                        'description': null,
                        'amount': 0,
                        'type': null,
                        'created': moment().format('YYYY-MM-DD'),
                        'choices': {
                            'type': {{ prototype.type.vars.choices|json_encode|raw }}
                        }
                    });
                };

                $scope.removePayment = function (index) {
                    $scope.payments.splice(index, 1);
                };

                $scope.total = function () {
                    var total = 0;
                    for (var i = 0; i < $scope.payments.length; i++) {
                        var payment = $scope.payments[i];
                        total += payment.amount;
                    }
                    return total;
                }
            });

            angular.bootstrap(document.querySelector('#{{ form.vars.id }}_app'), ['invoicing_payment_collection_app']);
        });
    </script>
{% endblock invoicing_payment_collection_javascript %}

{% macro generateName(name) %}
    name="{{ ("generateName('" ~ name ~ "', $index)")|ang }}"
{% endmacro %}

{% macro classHasError(path) %}
    'has-error': {{ path }}.length > 0
{% endmacro %}

{% macro helpBlockError(path) %}
    <div class="help-block" ng-show="{{ path }}.length > 0"
         ng-repeat="error in {{ path }}">
        {{ 'error'|ang }}
    </div>
{% endmacro %}

{% block invoicing_invoice_line_collection_label %}
    {% set widget_add_btn = null %}
    {{ block('form_label') }}
{% endblock invoicing_invoice_line_collection_label %}

{% block invoicing_payment_collection_label %}
    {% set widget_add_btn = null %}
    {{ block('form_label') }}
{% endblock invoicing_payment_collection_label %}

